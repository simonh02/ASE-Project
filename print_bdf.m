%this function will print out the output file 

function print_bdf(input,path_bdf_new,sectioned_variable)

%Input
% input : a cellstring data structure in the format of 'read_bdf_short_template'
% path_bdf_new : the path to the location the file will be printed to
% sectioned_varaible : scaler, used to control what sections of the file
% will be printed
%  0, print Begin BULK and END DATA and CEND
%  1, print Begin BULK only
%  2, print END DATA only
%  3, print cend only
%  4, print neither

%Output
% a bdf file at the specified location in parth_bdf_new

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%MATLAB Input to BDF FILE %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%need to convert all numbers to maximum 8 charactes efficiently
%will support the 16 characters template at another date...

%must first send the input file thorugh a translator to convert all
%numerical data into the proper strings and cell array structure

%input must be of the format (fieldnames can be omitted to not be printed)
%input.STATEMENTS
%input.FILE_MANAGEMENT
%input.EXECUTIVE_CONTROL
%input.CASE_CONTROL
%input.SUBCASE
%input.BULK
%all fieldnames and sub fieldnames must be uppercase
%data input into all fields must be in STRING or CHARACTER format before using this
%function


%input.SUBCASE, has multiple sub fields that must be attached to the
%struture, eg;
%input.SUBCASE.SPC , will find the SPC id for that subcase.

%box chracter length limit
line_limit=8;

%exceptions
%exceptions_string = {'RBE2','RBE3'};

%open file to write fem file
%path_bdf_new='C:\Users\e-tru\Downloads\tester_tester_plane.bdf'
fileID=fopen(path_bdf_new,'wt');

fprintf(fileID,'$$------------------------------------------------------------------------------$\n');
fprintf(fileID,'$$\n');
fprintf(fileID,'$$ Nastran Input Deck Generated by MATLAB Version  : 2017.0.2\n');
fprintf(fileID,'$$ Generated using HyperMesh-Nastran Template Version : 2017.2\n');
fprintf(fileID,'$$\n');
fprintf(fileID,'$$   Template:  NastranMSC general\n');
fprintf(fileID,'$$\n');
fprintf(fileID,'$$------------------------------------------------------------------------------$\n');
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%NASTRAN STATEMENTS%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

try
    %takes strings, do not add  NASTRAN at begining of request/statement, it is printed automatically
    fprintf(fileID,'$$------------------------------------------------------------------------------$\n');
    fprintf(fileID,'$$                      NASTRAN STATEMENTS                                      $\n');
    fprintf(fileID,'$$------------------------------------------------------------------------------$\n');
    fprintf(fileID,'NASTRAN %s\n',input.STATEMENTS{:});
catch
    %nothing
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%File Management%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

try
    fprintf(fileID,'$$------------------------------------------------------------------------------$\n');
    fprintf(fileID,'$$                      File Management                                         $\n');
    fprintf(fileID,'$$------------------------------------------------------------------------------$\n');  
    fprintf(fileID,'%s\n',input.FILE_MANAGEMENT{:});
catch
    %nothing
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%EXECUTIVE CONTROL%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

try
    %name of the field is printed followed by the string attached to it,
    %can be passed to filemanagement as full strings to be printed completly
    %without the necessary formatting
    fprintf(fileID,'$$------------------------------------------------------------------------------$\n');
    fprintf(fileID,'$$                      Executive Control                                       $\n');
    fprintf(fileID,'$$------------------------------------------------------------------------------$\n');
    
    num_fields = size(fieldnames(input.EXECUTIVE_CONTROL),1);
    exc_names = fieldnames(input.EXECUTIVE_CONTROL);
    for i = 1:num_fields
        name_exc = exc_names{i};
        string = num2str(input.EXECUTIVE_CONTROL.(name_exc)); %work on non-numerci strings
        fprintf(fileID,'%s ',name_exc);
        fprintf(fileID,'%s\n',string);
    end
    
catch
   %nothing 
end

%%%%%%%%%%%%
%%%%CEND%%%%
%%%%%%%%%%%%
if sectioned_variable==0 || sectioned_variable==3
    fprintf(fileID,'CEND\n');
end
%%%%%%%%%%%%%%%%%%%%%%%%
%%CASE CONTROL SECTION%%
%%%%%%%%%%%%%%%%%%%%%%%%


try
    %will printout list of cell strings
    fprintf(fileID,'$$------------------------------------------------------------------------------$\n');
    fprintf(fileID,'$$                      CASE Control                                            $\n');
    fprintf(fileID,'$$------------------------------------------------------------------------------$\n'); 
    fprintf(fileID,'%s\n',input.CASE_CONTROL{:});
    
catch
   %nothing 
end
    
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%INPUT SUBCASES%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

try
    
    fprintf(fileID,'$$------------------------------------------------------------------------------$\n');
    fprintf(fileID,'$$                      Subcase Information                                     $\n');
    fprintf(fileID,'$$------------------------------------------------------------------------------$\n'); 
    
    [~,num_subcase]=size(input.SUBCASE);

    for i = 1:num_subcase
        sub_names = upper(fieldnames(input.SUBCASE(i)));
        %check if all feilds are empty
        
        if ~ all( structfun(@isempty,input.SUBCASE(i)) )
            %print subcase i
            num_string = num2str(i);
            fprintf(fileID,'$\n');
            sub_text_title = ['SUBCASE ',num_string,'\n'];
            fprintf(fileID,sub_text_title); 
            for k = 1:length(sub_names)
                current_name = char(sub_names(k));
                if isempty(input.SUBCASE(i).(current_name)) 
                    %empty field
                    %print nothing...
                else
                    %print output
                    curr_out = (input.SUBCASE(i).(current_name));
                    clop = class(curr_out);
                    switch clop
                        case 'string'
                            curr_out=char(curr_out);
                        case 'numeric'
                            curr_out=num2str(curr_out);
                        otherwise
                            %nothing...already char
                    end 
                    test_line = [current_name,' = ',curr_out,'\n'];
                    fprintf(fileID,test_line); 
                end

            end
            fprintf(fileID,'$\n');
        end
    end
    
catch
    %nothing
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%INPUT BULK DATA%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

try
    if sectioned_variable==0 || sectioned_variable==1
            fprintf(fileID,'BEGIN BULK\n');
            fprintf(fileID,'$\n');
    end
    if isfield(input,'BULK')
        names_bulk=fieldnames(input.BULK);
        %convert the cellstr structure into printable text
        %assumes that the input text can be correctly read by the FEM solver
        %assumes input is string text
        %
        %Future implementations
        %   Correction if input is numeric...
        %   Correction of string input of numeric strings...
        next_line_flag = ' ';
        empty_text =pad(next_line_flag,line_limit,'right');

        for i =1:length(names_bulk)
            %check if dimensions are ok
            current_name = names_bulk{i};

            if size(input.BULK.(current_name),2)>1
                input.BULK.(current_name)=input.BULK.(current_name)';
                %disp(current_name)
            end

            fprintf(fileID,'$$\n');
            fprintf(fileID,'$$  %s Data\n',current_name);
            fprintf(fileID,'$$\n');

            if   strcmp(current_name,'CONTROL_CARDS')
                    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                    %%%print out control cards informtion%%%
                    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                    %unstructured
                    fprintf(fileID,'%s\n',input.BULK.(current_name){:});
            else
                %Print Bulk Data
                print_out_bulk_data(input,current_name,empty_text,line_limit,fileID)
            end

        end
    end
    if (sectioned_variable==0) || (sectioned_variable==2)
        fprintf(fileID,'$\n');
        fprintf(fileID,'ENDDATA\n');  
        fprintf(fileID,'$\n');
    end
    
    
catch
    %nothing
    disp('Error in writing out .bdf file')
    disp(current_name)
end


fclose(fileID);

end
