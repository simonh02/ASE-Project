function print_fem111(input, path_fem_new, sectioned_variable)
    fileID = fopen(path_fem_new, 'wt');
    if fileID == -1
        error('Failed to open file: %s', path_fem_new);
    end
    
    % Write header
    fprintf(fileID, '$$\n');
    fprintf(fileID, '$$ Optistruct Input Deck Generated by MATLAB Version  : 2017.2.0.16\n');
    fprintf(fileID, '$$ Generated using HyperMesh-Optistruct Template Version : 2017.2\n');
    fprintf(fileID, '$$\n');
    fprintf(fileID, '$$   Template:  optistruct\n');
    fprintf(fileID, '$$\n');
    fprintf(fileID, '$$ optistruct\n');
    fprintf(fileID, '$\n');
    
    % Write IO requests
    if isfield(input, 'IO') && ~isempty(input.IO)
        for i = 1:numel(input.IO)
            fprintf(fileID, '%s\n', input.IO{i});
        end
    end
    
    % Write case control section
    fprintf(fileID, '$$------------------------------------------------------------------------------$\n');
    fprintf(fileID, '$$                      Case Control Cards                                      $\n');
    fprintf(fileID, '$$------------------------------------------------------------------------------$\n');  
    
    % Write objectives
    if isfield(input, 'OBJECTIVES') && ~isempty(input.OBJECTIVES)
        fprintf(fileID, '$$\n');
        fprintf(fileID, '$$  OBJECTIVES Data\n');
        fprintf(fileID, '$$\n');
        % Add objectives writing logic here if needed
    end
    
    fprintf(fileID, '$\n\n$$$$$$ SORTED ECHO OF THE INPUT DECK $$$$$$\n\n$\n');
    
    % Write SUBCASE data
    if isfield(input, 'SUBCASE') && ~isempty(input.SUBCASE)
        fprintf(fileID, '$ subcase cards\n');
        for i = 1:numel(input.SUBCASE)
            sub = input.SUBCASE(i);
            fprintf(fileID, 'SUBCASE %d\n', i);
            fprintf(fileID, '  LABEL %s\n', sub.LABEL);
            fprintf(fileID, '  SPC = %s\n', sub.SPC);
            fprintf(fileID, '  LOAD = %s\n\n', sub.LOAD);
        end
    end
    
    % Write BULK data
    if sectioned_variable == 0 || sectioned_variable == 1
        fprintf(fileID, 'BEGIN BULK\n$\n');
    end
    
    if isfield(input, 'BULK') && ~isempty(input.BULK)
        bulk_fields = fieldnames(input.BULK);
        for i = 1:numel(bulk_fields)
            field_name = bulk_fields{i};
            fprintf(fileID, '$$\n$$  %s Data\n$$\n', field_name);
            
            cards = input.BULK.(field_name);
            for j = 1:numel(cards)
                if iscell(cards{j})  % Multi-line card
                    for k = 1:numel(cards{j})
                        fprintf(fileID, '%s\n', cards{j}{k});
                    end
                else  % Single-line card
                    % Split into 8-character chunks
                    card_str = cards{j};
                    for pos = 1:8:length(card_str)
                        end_pos = min(pos+7, length(card_str));
                        fprintf(fileID, '%s\n', card_str(pos:end_pos));
                    end
                end
            end
        end
    end
    
    % Write ENDDATA
    if sectioned_variable == 0 || sectioned_variable == 2
        fprintf(fileID, 'ENDDATA\n');
    end
    
    fclose(fileID);
end
