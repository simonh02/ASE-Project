%this function will print out the output file 

function print_fem(input,path_fem_new,sectioned_variable)

%Input
%input : a cellstring data structure in the format of 'extract_all_optistruct_fem_version3'
%path_fem_new : the path to the location the file will be printed to
%sectioned_varaible : scaler, used to control what sections of the file
%will be printed
% 0, print Begin BULK and END DATA
% 1, print Begin BULK
% 2, print END DATA
% 3, print neither

%Output
%an fem file, short format

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%MATLAB Input to FEM FILE %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%need to convert all numbers to maximum 8 charactes efficiently
%will support the 16 characters template at another date...

%must first send the input file thorugh a translator to convert all
%numerical data into the proper strings and cell array structure

%input must be of the format
%input.IO
%input.SUBCASE
%input.OBJETIVES
%input.BULK
%all fieldnames and sub feildnames must be uppercase
%data input into all feilds must be in STRING or CHARACTER format before using this
%function

%input.IO are output requests in the form of strings.

%input.SUBCASE, has multiple sub fields that must be attached to the
%struture, eg;
%input.SUBCASE.SPC , will find the SPC id for that subcase.

%input.OBJETIVES

%path_fem_new='C:\Users\e-tru\Documents\test.fem';

%box chracter length limit
line_limit=8;

%exceptions
%exceptions_string = {'RBE2','RBE3'};

%open file to write fem file
fileID=fopen(path_fem_new,'wt');

fprintf(fileID,'$$\n');
fprintf(fileID,'$$ Optistruct Input Deck Generated by MATLAB Version  : 2017.2.0.16\n');
fprintf(fileID,'$$ Generated using HyperMesh-Optistruct Template Version : 2017.2\n');
fprintf(fileID,'$$\n');
fprintf(fileID,'$$   Template:  optistruct\n');
fprintf(fileID,'$$\n');
fprintf(fileID,'$$ optistruct\n');
fprintf(fileID,'$\n');

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%INPUT IO Request Strings%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

try
   num_io = numel(input.IO);
   
   for i = 1:num_io
       new_string=char([input.IO{i},'\n']);
       fprintf(fileID,new_string);
   end
    
catch
    %nothing
end

fprintf(fileID,'$$------------------------------------------------------------------------------$\n');
fprintf(fileID,'$$                      Case Control Cards                                      $\n');
fprintf(fileID,'$$------------------------------------------------------------------------------$\n');  

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%INPUT OBJECTIVES %%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

try
   
    fprintf(fileID,'$$\n');
    fprintf(fileID,'$$  OBJECTIVES Data\n');
    fprintf(fileID,'$$\n');
    
    print_objectives_data_hypermesh(input,fileID)
     
    
catch
    %nothing
end

fprintf(fileID,'$\n');
fprintf(fileID,'\n');
fprintf(fileID,'$$$$$$ SORTED ECHO OF THE INPUT DECK $$$$$$\n');
fprintf(fileID,'\n');
fprintf(fileID,'\n');
fprintf(fileID,'$\n');
    
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%INPUT SUBCASES%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

try
    
    fprintf(fileID,'$ subcase cards\n');

    print_out_subcase_data_hypermesh(input,fileID)
   
    
catch
    %nothing
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%INPUT BULK DATA%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

try

    names_bulk=fieldnames(input.BULK);
    if sectioned_variable==0 || sectioned_variable==1
        fprintf(fileID,'BEGIN BULK\n');
        fprintf(fileID,'$\n');
    end
    
    
    next_line_flag = '+';
    empty_text = pad(next_line_flag,line_limit,'right');

    for i =1:length(names_bulk)
        current_name = names_bulk{i};
        fprintf(fileID,'$$\n');
        fprintf(fileID,'$$  %s Data\n',current_name);
        fprintf(fileID,'$$\n');
        
        if   strcmp(current_name,'CONTROL_CARDS')
                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                %%%print out control cards informtion%%%
                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                %unstructured
                fprintf(fileID,'%s\n',input.BULK.(current_name){:});
        else
            %reformat RBE's if inccorctl formatted
            if size(input.BULK.(names_bulk{i}),2) > 1
                input.BULK.(names_bulk{i}) = input.BULK.(names_bulk{i})';
            end
            %%%%%%%%%%%%%%%%%
            %Print Bulk Data%
            %%%%%%%%%%%%%%%%%
     
            print_out_bulk_data(input,current_name,empty_text,line_limit,fileID)
         
            %disp(names_bulk{i})
        end
    
    end

    if (sectioned_variable==0) || (sectioned_variable==2)
        fprintf(fileID,'$\n');
        fprintf(fileID,'ENDDATA\n');  
        fprintf(fileID,'$\n');
    end
    
    
catch
    %nothing
    %disp('Error in writing out .fem file')
end


fclose(fileID);

end


function print_out_subcase_data_hypermesh(input,fileID)

[~,num_subcase]=size(input.SUBCASE);

    for i = 1:num_subcase
        %if not all of the subcase fields are empty, the write out the subcase
        if ~ all( structfun(@isempty,input.SUBCASE(i)) )
       
            sub_names = upper(fieldnames(input.SUBCASE(i)));
            %print subcase i
            num_string = numstring_optistruct_integer(i,0, 9, 1);
            fprintf(fileID,'$\n');
            sub_text_title = ['  SUBCASE = ',num_string,'\n'];
            %print the sucase title
            fprintf(fileID,sub_text_title); 
            for k = 1:length(sub_names)
                current_name = char(sub_names(k));
                if isempty(input.SUBCASE(i).(current_name)) 
                    %empty structure

                else
                    %structure has string data

                    n_len = length(current_name);
                    if (n_len+2) <= 9
                        %add spaces until the string has length of 9
                        spaces_to_add=abs(n_len-7);
                        add_text_string=char(strjoin(repmat(" ", 1,spaces_to_add),''));
                        new_text_front = ['  ',current_name,add_text_string,' = '];
                    else
                        %add one additional 
                        new_text_front = ['  ',current_name,' = '];
                    end

                    %grab second part of the string
                    %test if string is a number or not
                    %need a better method if user makes a mistake...?
                    eval_string = char(input.SUBCASE(i).(current_name));
                    %isletter(eval_string)
                    if length(eval_string) > 1
                         %need to diffirentiate between expoenential and non-e
                         %expoenential
                         eval_string = char(strrep(char(eval_string),'e-','-'));
                         eval_m = max(size(str2num(char(strrep(eval_string(2:length(eval_string)),'-','e-'))))); %#ok<ST2NM>
                    else
                         eval_m = max(size(str2num(char(eval_string)))); %#ok<ST2NM>
                    end

                    if eval_m == 0
                       %use string as is
                       text_print=[new_text_front,  strtrim(char(eval_string)),'\n'];
                    else
                        %modify string as a number
                        spaces_to_add=abs(length(char(eval_string))-9);
                        add_text_string=char(strjoin(repmat(" ", 1,spaces_to_add),''));
                        text_print = [new_text_front,add_text_string,char(eval_string),'\n'];
                    end

                    fprintf(fileID, text_print);

                end

            end
            fprintf(fileID,'$\n');
        end %end of if statement
    end
    
end


function print_objectives_data_hypermesh(input,fileID)

 obj_names = fieldnames(input.OBJECTIVES);
    
    for i = 1:length(obj_names)
        current_name = upper(obj_names{i});
        if ~isempty(input.OBJECTIVES.(current_name)) %eval(['~isempty(input.OBJECTIVES.',current_name,')'])  
            
            row_num = input.OBJECTIVES.(current_name){1}; %eval(['input.OBJECTIVES.',current_name,'{1}']) ;
            
            switch current_name
                case 'DESOBJ'
                    
                    minmaxflagtext = row_num{1};
                    
                    if ~isnumeric(row_num{2})
                        row_num{2}=char(row_num{2});
                        %spaces_to_add=abs(length(row_num)-9);
                        %add_text_string=char(strjoin(repmat(" ", 1,spaces_to_add),''));
                        string = row_num{2};
                    else
                        %is a number, convert to string
                        string = numstring_optistruct_integer(row_num{2},0, length(char(num2str(row_num{2}))), 1); %possible error here...? row was changed to row_num
                    end
                    print_text = ['DESOBJ(',char(minmaxflagtext),')=', string,'\n'];
                    fprintf(fileID, print_text);
                    
                case 'DESGLB'
                    if ~isnumeric(row_num)
                        row_num=char(row_num);
                        spaces_to_add=abs(length(row_num)-9);
                        add_text_string=char(strjoin(repmat(" ", 1,spaces_to_add),''));
                        string = [add_text_string,row_num];
                    else
                        %is a number, convert to string
                        string = numstring_optistruct_integer(row_num,0, 9, 1);
                    end
                    print_text = [' DESGLB  = ', string,'\n'];
                    fprintf(fileID, print_text);
                otherwise
               %nothing...     
            end
            
        end
        
    end
  
end


